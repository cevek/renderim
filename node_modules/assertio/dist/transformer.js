"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
function default_1(program, pluginOptions) {
    return (ctx) => {
        return (sourceFile) => {
            console.log('adsf', process.env.NODE_ENV, pluginOptions.productionEnv);
            if (process.env.NODE_ENV !== (pluginOptions.productionEnv || 'production'))
                return sourceFile;

            const checker = program.getTypeChecker();
            function visitor(node) {
                if (isDebugImport(node)) {
                    return;
                }
                if (ts.isExpressionStatement(node) &&
                    ts.isCallExpression(node.expression) &&
                    ts.isIdentifier(node.expression.expression) &&
                    isDebugSymbol(checker.getSymbolAtLocation(node.expression.expression))) {
                    return;
                }
                if (ts.isCallExpression(node) &&
                    ts.isIdentifier(node.expression) &&
                    isDebugSymbol(checker.getSymbolAtLocation(node.expression))) {
                    if (isDebugSymbol(checker.getSymbolAtLocation(node.expression))) {
                        if (node.arguments.length > 0) {
                            return node.arguments[0];
                        }
                        else {
                            return ts.createVoidZero();
                        }
                    }
                }
                return ts.visitEachChild(node, visitor, ctx);
            }
            return ts.visitEachChild(sourceFile, visitor, ctx);
        };
    };
}
exports.default = default_1;
function isDebugSymbol(symbol) {
    if (symbol !== undefined && isDebugFilename(symbol.declarations[0].getSourceFile().fileName)) {
        return true;
    }
    return (symbol !== undefined &&
        ts.isImportSpecifier(symbol.declarations[0]) &&
        isDebugImport(symbol.declarations[0].parent.parent.parent));
}
function isDebugFilename(filename) {
    return Boolean(filename.match(/(^|\W)debug(\.[jt]sx?)?$/));
}
function isDebugImport(node) {
    return (ts.isImportDeclaration(node) &&
        ts.isStringLiteral(node.moduleSpecifier) &&
        isDebugFilename(node.moduleSpecifier.text));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cmFuc2Zvcm1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUVqQyxtQkFBd0IsT0FBbUIsRUFBRSxhQUFzQztJQUMvRSxPQUFPLENBQUMsR0FBNkIsRUFBRSxFQUFFO1FBQ3JDLE9BQU8sQ0FBQyxVQUF5QixFQUFFLEVBQUU7WUFDakMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxhQUFhLElBQUksWUFBWSxDQUFDO2dCQUFFLE9BQU8sVUFBVSxDQUFDO1lBQzlGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN6QyxTQUFTLE9BQU8sQ0FBQyxJQUFhO2dCQUMxQixJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDckIsT0FBTztpQkFDVjtnQkFDRCxJQUNJLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7b0JBQzlCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO29CQUNwQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO29CQUMzQyxhQUFhLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDeEU7b0JBQ0UsT0FBTztpQkFDVjtnQkFFRCxJQUNJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7b0JBQ3pCLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztvQkFDaEMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDN0Q7b0JBQ0UsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO3dCQUM3RCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs0QkFDM0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO3lCQUM1Qjs2QkFBTTs0QkFDSCxPQUFPLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQzt5QkFDOUI7cUJBQ0o7aUJBQ0o7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDakQsQ0FBQztZQUNELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNOLENBQUM7QUFwQ0QsNEJBb0NDO0FBRUQsU0FBUyxhQUFhLENBQUMsTUFBNkI7SUFDaEQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzFGLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLENBQ0gsTUFBTSxLQUFLLFNBQVM7UUFDcEIsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FDN0QsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxRQUFnQjtJQUNyQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsSUFBYTtJQUNoQyxPQUFPLENBQ0gsRUFBRSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQztRQUM1QixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDeEMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQzdDLENBQUM7QUFDTixDQUFDIn0=